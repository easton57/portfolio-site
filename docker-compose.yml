services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-portfolio}
      POSTGRES_USER: ${DB_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./SQL:/docker-entrypoint-initdb.d
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-portfolio_user} -d ${DB_NAME:-portfolio}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node.js Application
  app:
    build: .
    container_name: portfolio_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-portfolio}
      DB_USER: ${DB_USER:-portfolio_user}
      DB_PASSWORD: ${DB_PASSWORD}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      RECAPTCHA_VERIFY_URL: ${RECAPTCHA_VERIFY_URL}
      EMAILJS_SERVICE_ID: ${EMAILJS_SERVICE_ID}
      EMAILJS_TEMPLATE_ID: ${EMAILJS_TEMPLATE_ID}
      EMAILJS_PUBLIC_KEY: ${EMAILJS_PUBLIC_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portfolio.rule=Host(`eastonseidel.com`) || Host(`www.eastonseidel.com`)"
      - "traefik.http.routers.portfolio.entrypoints=websecure"
      - "traefik.http.routers.portfolio.tls.certresolver=letsencrypt"
      - "traefik.http.routers.portfolio.tls.domains[0].main=eastonseidel.com"
      - "traefik.http.routers.portfolio.tls.domains[0].sans=www.eastonseidel.com"
      - "traefik.http.services.portfolio.loadbalancer.server.port=3000"
      - "traefik.docker.network=traefik_network"
      # Security headers
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.contentSecurityPolicy=default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.emailjs.com; frame-src https://www.google.com/recaptcha/;"
      - "traefik.http.routers.portfolio.middlewares=security-headers"

  # Nginx for static files
  nginx:
    image: nginx:alpine
    container_name: portfolio_nginx
    restart: unless-stopped
    volumes:
      - ./HTML:/usr/share/nginx/html:ro
      - ./CSS:/usr/share/nginx/html/css:ro
      - ./IMG:/usr/share/nginx/html/img:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - internal
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portfolio-static.rule=Host(`eastonseidel.com`) || Host(`www.eastonseidel.com`)"
      - "traefik.http.routers.portfolio-static.entrypoints=websecure"
      - "traefik.http.routers.portfolio-static.tls.certresolver=letsencrypt"
      - "traefik.http.routers.portfolio-static.tls.domains[0].main=eastonseidel.com"
      - "traefik.http.routers.portfolio-static.tls.domains[0].sans=www.eastonseidel.com"
      - "traefik.http.services.portfolio-static.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik_network"
      # Security headers for static content
      - "traefik.http.middlewares.static-security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.static-security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.static-security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.static-security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.static-security-headers.headers.contentSecurityPolicy=default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.emailjs.com; frame-src https://www.google.com/recaptcha/;"
      - "traefik.http.routers.portfolio-static.middlewares=static-security-headers"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: portfolio_traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=namecheap"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--accesslog.format=json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
      - traefik_logs:/var/log/traefik
    networks:
      - traefik_network
    environment:
      - NAMECHEAP_API_USER=${NAMECHEAP_API_USER}
      - NAMECHEAP_API_KEY=${NAMECHEAP_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.eastonseidel.com`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"

volumes:
  postgres_data:
    driver: local
  traefik_certs:
    driver: local
  traefik_logs:
    driver: local

networks:
  internal:
    driver: bridge
    internal: true
  traefik_network:
    driver: bridge 
